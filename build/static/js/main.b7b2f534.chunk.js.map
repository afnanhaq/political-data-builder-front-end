{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","App","useState","chosenSampleType","setChosenSampleType","chosenWhichState","setChosenWhichState","chosenSampleTechnique","chosenSampleSize","setChosenSampleSize","chosenInformationType","setChosenInformationType","chosenOutputType","setChosenOutputType","setSubmitButtonClicked","resultingValues","className","aria-label","value","onChange","e","target","href","type","name","id","checked","htmlFor","onClick","data","sampleType","whichState","sampleTechnique","sampleSize","informationType","outputType","post","then","res","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7b2f534.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'http://127.0.0.1:5000';\n\nfunction App() {\n  const [chosenSampleType, setChosenSampleType] = useState(\"\");\n  const [chosenWhichState, setChosenWhichState] = useState(\"\");\n  const [chosenSampleTechnique, setChosenSampleTechnique] = useState(\"\");\n  const [chosenSampleSize, setChosenSampleSize] = useState(\"\");\n  const [chosenInformationType, setChosenInformationType] = useState(\"\");\n  const [chosenOutputType, setChosenOutputType] = useState(\"\");\n  const [submitButtonClicked, setSubmitButtonClicked] = useState(false);\n\n  const postIt = () => {\n  \tsetSubmitButtonClicked(true);\n  \tconst data = {\n  \t\tsampleType: chosenSampleType,\n  \t\twhichState: chosenWhichState,\n  \t\tsampleTechnique: chosenSampleTechnique,\n  \t\tsampleSize: chosenSampleSize,\n  \t\tinformationType: chosenInformationType,\n  \t\toutputType: chosenOutputType\n  \t}\n  \taxios.post(\"/getfile\", { data })\n  \t.then(res => {console.log(res)});\n  }\n\n  const hello = (\n          <div>\n            <hr className=\"mt-4 mb-4\"/>\n            <h3 className=\"pb-2\"> I will sample using: </h3> \n            <div className=\"form-check\">\n              <input className=\"form-check-input\" type=\"radio\" name=\"sampleTechnique\" id=\"stratified\" value=\"stratified\" checked={chosenSampleTechnique === \"stratified\"}\n              onChange={e => setChosenSampleTechnique(\"stratified\")} />\n              <label className=\"form-check-label\" htmlFor=\"stratified\">stratified sampling - <small> equal proportion of the sample size is selected from each state </small></label>\n            </div>\n            <div className=\"form-check\">\n              <input className=\"form-check-input\" type=\"radio\" name=\"sampleTechnique\" id=\"random\" value=\"random\" checked={chosenSampleTechnique === \"random\"}\n              onChange={e => setChosenSampleTechnique(\"random\")} />\n              <label className=\"form-check-label\" htmlFor=\"random\">simple random sampling - <small> every member of the national population has an equal chance of being selected  </small></label>\n            </div>\n          </div>\n  )\n\n  const resultingValues = (\n            <div>\n            <hr className=\"mt-4 mb-4\"/>\n            <h3 className=\"pb-2\"> The state I want a sample of is: </h3> \n            <select className=\"form-select\" aria-label=\"chooseState\" value={chosenWhichState} onChange={e => setChosenWhichState(e.target.value)}>\n              <option value=\"\">Select a state</option>\n              <option value='Alaska'>Alaska</option>\n              <option value='Alabama'>Alabama</option>\n              <option value='Arkansas'>Arkansas</option>\n              <option value='Arizona'>Arizona</option>\n              <option value='California'>California</option>\n              <option value='Colorado'>Colorado</option>\n              <option value='Connecticut'>Connecticut</option>\n              <option value='DC'>DC</option>\n              <option value='Delaware'>Delaware</option>\n              <option value='Florida'>Florida</option>\n              <option value='Georgia'>Georgia</option>\n              <option value='Hawaii'>Hawaii</option>\n              <option value='Iowa'>Iowa</option>\n              <option value='Idaho'>Idaho</option>\n              <option value='Illinois'>Illinois</option>\n              <option value='Indiana'>Indiana</option>\n              <option value='Kansas'>Kansas</option>\n              <option value='Kentucky'>Kentucky</option>\n              <option value='Louisiana'>Louisiana</option>\n              <option value='Massachusetts'>Massachusetts</option>\n              <option value='Maryland'>Maryland</option>\n              <option value='Maine'>Maine</option>\n              <option value='Michigan'>Michigan</option>\n              <option value='Minnesota'>Minnesota</option>\n              <option value='Missouri'>Missouri</option>\n              <option value='Mississippi'>Mississippi</option>\n              <option value='Montana'>Montana</option>\n              <option value='North Carolina'>North Carolina</option>\n              <option value='North Dakota'>North Dakota</option>\n              <option value='Nebraska'>Nebraska</option>\n              <option value='North Hampshire'>North Hampshire</option>\n              <option value='New Jersey'>New Jersey</option>\n              <option value='New Mexico'>New Mexico</option>\n              <option value='Nevada'>Nevada</option>\n              <option value='New York'>New York</option>\n              <option value='Ohio'>Ohio</option>\n              <option value='Oklahoma'>Oklahoma</option>\n              <option value='Oregon'>Oregon</option>\n              <option value='Philadelphia'>Philadelphia</option>\n              <option value='Rhode Island'>Rhode Island</option>\n              <option value='South Carolina'>South Carolina</option>\n              <option value='South Dakota'>South Dakota</option>\n              <option value='Tennessee'>Tennessee</option>\n              <option value='Texas'>Texas</option>\n              <option value='Utah'>Utah</option>\n              <option value='Virginia'>Virginia</option>\n              <option value='Vermont'>Vermont</option>\n              <option value='Washington'>Washington</option>\n              <option value='Wisconsin'>Wisconsin</option>\n              <option value='West Virginia'>West Virginia</option>\n              <option value='Wyoming'>Wyoming</option>\n            </select>\n            </div>\n    )\n    \n\n  return (\n    <div className=\"App\">\n\n      <nav className=\"navbar navbar-light bg-danger\">\n          <div className=\"container-fluid\">\n            <a className=\"navbar-brand mb-0 h1\" href=\"#\"><h1>L2 Data Access Tool</h1></a>\n          </div>\n      </nav>\n\n      <div className=\"container\">\n\n          <div className=\"offset-md-1 mt-5 col-md-9 pb-5\">\n            <h3 className=\"display-3 text-center mt-5\"> Build your own political dataset </h3>\n            <hr className=\"mt-5 mb-4\"/>\n            <h3 className=\"pb-2\"> I want a: </h3> \n        \t{/*<div className=\"form-check form-check-inline\">\n              <input className=\"form-check-input\" type=\"radio\" name=\"sampleType\" id=\"nationalSample\" value=\"nationalSample\" checked={chosenSampleType === \"nationalSample\"} \n              onChange={e => setChosenSampleType(\"nationalSample\")}/>\n              <label className=\"form-check-label\" htmlFor=\"nationalSample\">national sample</label>\n            </div>*/}\n            <div className=\"form-check form-check-inline\">\n              <input className=\"form-check-input\" type=\"radio\" name=\"sampleType\" id=\"stateSample\" value=\"stateSample\" checked={chosenSampleType === \"stateSample\"}\n              onChange={e => setChosenSampleType(\"stateSample\")} />\n              <label className=\"form-check-label\" htmlFor=\"stateSample\">state sample</label>\n            </div>\n            {chosenSampleType === \"\" ? null : resultingValues }\n            \n          {chosenWhichState === \"\" && chosenSampleTechnique === \"\" ? null :\n            (\n            <div>\n              <hr className=\"mt-4 mb-4\"/>\n              <h3 className=\"pb-2\"> The size of my sample should be: </h3> \n              <div className=\"form-check form-check-inline\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"sampleSize\" id=\"onepercent\" value=\"onepercent\" checked={chosenSampleSize===\"onepercent\"}\n                onChange={e => setChosenSampleSize(\"onepercent\")}/>\n                <label className=\"form-check-label\" htmlFor=\"onepercent\">1%</label>\n              </div>\n              <div className=\"form-check form-check-inline\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"sampleSize\" id=\"fivepercent\" value=\"fivepercent\" checked={chosenSampleSize===\"fivepercent\"}\n                onChange={e => setChosenSampleSize(\"fivepercent\")}/>\n                <label className=\"form-check-label\" htmlFor=\"fivepercent\">5%</label>\n              </div>\n              <div className=\"form-check form-check-inline\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"sampleSize\" id=\"tenpercent\" value=\"tenpercent\" checked={chosenSampleSize===\"tenpercent\"}\n                onChange={e => setChosenSampleSize(\"tenpercent\")}/>\n                <label className=\"form-check-label\" htmlFor=\"tenpercent\">10%</label>\n              </div>\n              <div className=\"form-check form-check-inline\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"sampleSize\" id=\"twentyfivepercent\" value=\"twentyfivepercent\" checked={chosenSampleSize===\"twentyfivepercent\"}\n                onChange={e => setChosenSampleSize(\"twentyfivepercent\")}/>\n                <label className=\"form-check-label\" htmlFor=\"twentyfivepercent\">25%</label>\n              </div>\n            </div>\n            )\n          }\n\n          {chosenSampleSize === \"\" ? null : \n          ( <div>\n              <hr className=\"mt-4 mb-4\"/>\n              <h3 className=\"pb-2\"> I want: </h3> \n              <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"informationType\" id=\"VD\" value=\"VD\" checked={chosenInformationType === \"VD\"}\n                onChange={e => setChosenInformationType(\"VD\")}/>\n                <label className=\"form-check-label\" htmlFor=\"VD\">both voter history and demographic information</label>\n              </div>\n              <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"informationType\" id=\"D\" value=\"D\" checked={chosenInformationType === \"D\"}\n                onChange={e => setChosenInformationType(\"D\")}/>\n                <label className=\"form-check-label\" htmlFor=\"D\"> just demographic </label>\n              </div>\n              <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"informationType\" id=\"V\" value=\"V\" checked={chosenInformationType === \"V\"}\n                onChange={e => setChosenInformationType(\"V\")}/>\n                <label className=\"form-check-label\" htmlFor=\"V\"> just voter history information </label>\n              </div>\n            </div>\n          )\n          }\n\n          {chosenInformationType === \"\" ? null :\n          ( \n          <div>\n            <hr className=\"mt-4 mb-4\"/>\n            <h3 className=\"pb-2\"> I want my file as a: </h3> \n            <div className=\"form-check form-check-inline\">\n              <input className=\"form-check-input\" type=\"radio\" name=\"outputType\" id=\"csv\" value=\"csv\" checked={chosenOutputType == \"csv\"} \n              onChange={e => setChosenOutputType(\"csv\")}/>\n              <label className=\"form-check-label\" htmlFor=\"csv\">.csv</label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input className=\"form-check-input\" type=\"radio\" name=\"outputType\" id=\"tabfile\" value=\"tabfile\" checked={chosenOutputType == \"tabfile\"} \n              onChange={e => setChosenOutputType(\"tabfile\")}/>\n              <label className=\"form-check-label\" htmlFor=\"tabfile\">.tabfile</label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input className=\"form-check-input\" type=\"radio\" name=\"outputType\" id=\"shapefile\" value=\"shapefile\" checked={chosenOutputType == \"shapefile\"}\n              onChange={e => setChosenOutputType(\"shapefile\")}/>\n              <label className=\"form-check-label\" htmlFor=\"shapefile\">.shapefile</label>\n            </div>\n          </div>\n          )\n          }\n\n          {chosenOutputType === \"\" ? null :\n          (\n          <div>\n            <br className=\"mt-4 mb-4\"/>\n            <div className=\"text-center\">\n            <button type=\"submit\" className=\"btn btn-primary btn-lg\" onClick={postIt}>Get Dataset</button>\n            </div>\n          </div>\n          )\n        }\n\n        </div>\n      </div>\n{/*\n      <div className=\"container-fluid\">\n        <hr />\n        <div className=\"text-center\">\n          <small className=\"mb-5\"> Designed by Eliot Brown, Saahil Chamdia, Afnan Haq, Cezar Pekelman htmlFor Love Data Week Datathon</small>\n        </div>\n      </div>\n*/}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}